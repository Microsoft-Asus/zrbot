{"1. Game Overview": ["Matches of SPACE-SPHERES will be played between two SPHERES, controlled by programs written by two separate teams.", "Each team will compete to have the most points when the round time is up. Each round lasts 180 seconds.", "Points may be generated by collecting the items (representing the satellite pieces) spread across the playing field and dropping them off inside one's assembly zone, representing the ideal place to construct a satellite."], "1.1 Overview of Game Features": ["This game features Satellite Positioning System (SPS) items, Assembly Zones, and Satellite Piece Items."], "1.1.1 Satellite Positioning System (SPS) Items": ["At the start of the game, there are three Satellite Positioning System (SPS) items given to each SPHERE.", "Teams need to place these three SPS items far apart to form a triangle; the area of the SPS-triangulated region is used to calculate the error radius that determines the team's estimated assembly zone.", "The greater the area is, the more precisely they will be informed of the location of their SPACE-S' assembly zone.", "Read more about SPS items in section 1.4.1 and assembly zones in section 1.1.2."], "1.1.2 Assembly Zones": ["The assembly zone is a spherical location which does not interfere with existing satellite orbits, as chosen randomly from a specific range of coordinates. It is about the size of one SPACE-S, with a diameter of 0.2 meters.", "Once all three SPS items are placed, the player will be able to use the function bool game.getZone(float zoneInfo[4]) to learn the estimated zone, that is a spherical zone within a certain radius of error from the true centre of their assembly zone.", "The radius of error of the estimated zone will be calculated as inversely proportional to the area of the triangle formed by the SPS."], "1.1.3 Satellite Piece Items": ["Once the SPACE-S knows where to assemble the final satellite, it may begin moving satellite piece items to its own specified assembly zone.", "Satellite items come in three sizes: small, medium, and large.", "Teams accumulate points for every second that an item is left in their zone.", "The larger the object is, the more points it will be worth, and the slower you will accelerate while holding it (read in section 1.4.3, 1.4.4).", "In order for a SPACE-S to pick up an item, it must dock to the item (docking information is in section 1.4.2).", "The items are distributed symmetrically on the map with the reflection point for each one being about the origin.", "This way, each item and its reflected pair are the same distance away from each SPACES."], "1.1.4 Locations of Items and SPACE-S": ["The locations of satellite items, and the opponent SPACE-S are revealed to the teams.", "Teams enter the specified item ID's (described in section 1.4.3) and use the function `void getItemLoc(float pos[], int itemID)` to get the location of the item.", "A SPACE-S can move anywhere on the map and have fixed initial positions (described in section 1.3.5)."], "1.1.5 Docking": ["To pick up a satellite piece, a SPACE-S needs to approach the item, slow down to below .01m/s, be pointing at the item and calling the docking function.", "The SPACE-S needs to stop in front of the item at a certain distance to pick up and the item will be released at the same distance away (described in section 1.4.2).", "In the 3D game a penalty is added for docking incorrectly (also described in section 1.4.2)."], "1.2 Game Layout": ["The Zero Robotics Australian Preliminary Tournament 2018 will be conducted in simulation.", "The game is played in an area called the Interaction Zone.", "If players leave the Interaction Zone, they will be considered out of bounds.", "The location of the SPHERES is measured from the centre of the satellite.", "The Interaction Zone for the game has the following dimensions:", "2D:", "    X: [-0.75: +0.75]", "    Y: [-0.75: +0.75]", "    Z: 0.0", "3D", "    X: [-0.75: +0.75]", "    Y: [-0.75: +0.75]", "    Z: [-0.75: +0.75]"], "1.2.1 2D Phase": ["For the 2D game, the arena is a plane with only X and Y dimensions.", "The items will be located at fixed points which create a symmetric map.", "There is a total of six items: two small, two medium and two large.", "There is more information on items in section 1.4.3."], "1.2.2 3D Phase": ["From the 3D phase onwards, the Z dimension is opened up for movement and several new mechanics will be introduced.", "The 3D phase adds penalties for a) calling the dock function when docking criteria are not met, b) colliding with items, and c) for staying in the opponent's assembly zone for longer than 10 cumulative seconds.", "See section 1.4.5 for more information about penalties."], "1.3 Satellite": ["Each team will write the software to command a SPHERES satellite to move in order to complete the game tasks.", "A SPHERES satellite can move in all directions using its twelve thrusters.", "The actual SPHERES satellite, like any other spacecraft, has a fuel source (in this case liquid carbon dioxide) and a power source (in this case AA battery packs).", "These resources are limited and must be used wisely.", "Therefore, the players of Zero Robotics are limited in the use of real fuel and batteries by virtual limits within the game.", "This section describes the limits to which players must adhere to wisely use real SPHERES resources."], "1.3.1 ZR User API": ["Here is a list of functions available in this year's game.", "Details can be found in the SPACE-SPHERES API (found in Table 2).", "In order to use these functions, use the syntax `game.functionName(inputs)`.", "For example; `game.dockItem()`.", "For functions not listed in Table 2, use the syntax `api.functionName(inputs)`, unless they are math functions, which can be called without reference to the instance.", "For example; `api.setPositionTarget(float posTarget[3])`", "Generic ZR user API Link: http://static.zerorobotics.mit.edu/docs/tutorials/ZR_user_API.pdf"], "1.3.2 Fuel": ["Each player is assigned a virtual fuel allocation of 60 seconds, which is the total sum of fuel used in seconds of individual thruster firing.", "Once the allocation is consumed, the satellite will not be able to respond to SPHERES control commands.", "It will fire thrusters only to avoid leaving the Interaction Zone or colliding with the other satellite.", "Any action that requires firing the thrusters such as rotating, accelerating or moving consumes fuel."], "1.3.3 Inter-satellite Communications": ["The satellites have the ability to communicate with each other using binary messages.", "The API functions sendMessage and receiveMessage may be used to send data between the satellites.", "The bandwidth available to the satellites is one unsigned character."], "1.3.4 Code Size": ["A SPHERES satellite can fit a limited amount of code in its memory.", "Each project has a specific code size allocation.", "When you compile your project with a code size estimate, the compiler will provide the percentage of the code size allocation that your project is using.", "Formal competition submissions require that your code size be 100% or less of the total allocation."], "1.3.5 Initial Position": ["The Blue Sphere starts at the X, Y, Z of `[0.0, 0.15, 0.0]`.", "The Red Sphere starts at the X, Y, Z of `[0.0, 0.15, 0.0]`.", "The satellite radius is 0.11m, but satellite position relative to game features is determined by the location of the centre of the satellite.", "Red:", "    x [m]: 0.0", "    y [m]: -0.15", "    z [m]: 0.0", "Blue", "    x [m]: 0.0", "    y [m]: 0.15", "    z [m]: 0.0"], "1.3.6 Player ID": ["Users will identify themselves as `playerID = 1` and opponents as `playerID = 2` for all games, whether or not they are the red SPHERES or the blue one respectively."], "1.3.7 Noise": ["It is important to note that although the two competitors in a match will always be performing the same challenge and have identical satellites, the two satellites may be affected by random perturbations in different ways, resulting in small or even large variations in score.", "This is fully intended as part of the challenge and reflects uncertainties in the satellite dynamic and sensing models.", "The best performing solutions will be those that prove to be robust to these variations and a wide variety of object parameters."], "1.4 Gameplay": ["In order to be victorious over the opposing team, each satellite should place their three SPS items, dock satellite items to place in their zones, all while managing their fuel, their time, and their location on the gameplay area."], "1.4.1 Satellite Positioning System": ["There are 3 SPS items held by each SPACE-S at the start of all the games.", "The SPACE-S teams must place them to triangulate their zone's centre.", "SPS zone locating works only after all 3 SPSs have been deployed using the void dropSPS() function.", "The SPS will calculate a radius of error inversely proportional to the area of the triangular SPS items and displays the zone with this radius of error.", "Upon dropping your final SPS you will receive points equal to .1/(error radius).", "In the 3D game SPS items cannot be placed outside game boundaries.", "As you drop SPS items your satellite will become gradually lighter, and thus gain a greater acceleration rate::    No SPS: acc", "    1 SPS: 8/9*acc", "    2 SPS: 4/5*acc", "    3 SPS: 8/11*acc"], "1.4.2 Docking": ["During the 2D game, to dock with an item a SPACE-S must approach an item, not be moving faster than .01m/s, be pointing at the item with a tolerance of 0.25 radians (The angle between the satellite's facing vector and the vector between the centre of the satellite and the centre of any face of the item is within 0.25 radians), be within a specified distance of an item and call the bool dockItem() function.", "In 3D, a penalty of .3 points is imposed on a SPACE-S that attempts to dock (calls `dockItem()` function) while not fulfilling the docking requirements.", "Read more about penalties in section 1.4.5.", "Item Pickup Distances (meters from centre of item):", "    Small:  [0.124: 0.146]", "    Medium: [0.138: 0.160]", "    Large:  [0.151: 0.173]"], "1.4.3 Items": ["There are six Satellite items (of three sizes) scattered around the interaction zone.", "Each has a unique numeric identifier from 0 to N-1, where N is the number of items.", "In the 2D version there are six total items (0-5).", "Call the game function `int hasItem(int itemID)` to determine whether the item is held by nobody (0), you (1), or your opponent (2).", "In 3D, A SPACE-S will be penalized if it collides with an item.", " - The penalty will be determined by the SPACE-S's momentum when it collides with the item.", " - This penalty applies everywhere except inside a SPACE-S team's own Assembly Zone where collisions with items will not be penalized.", "See section 1.4.5 for more information about penalties.", "Related Sections:", " - 1.4.3.1: Item IDs and Locations", " - 1.4.3.2: Item Sizes and Masses", " - 1.4.3.3: Item Acceleration Modifiers"], "1.4.3.1 Item IDs and Locations:": ["2D Locations (X, Y):", "    Item 0 (Large): (0.23, 0.23)", "    Item 1 (Large): (-0.23, -0.23)", "    Item 2 (Medium): (0.36, 0.36)", "    Item 3 (Medium): (-0.36, -0.36)", "    Item 4 (Small): (-0.5, 0.5)", "    Item 5 (Small): (0.5, -0.5)", "3D Locations (X, Y, Z):", "    Item 0 (Large): (0.23, 0.23, 0.23)", "    Item 1 (Large): (-0.23, -0.23, -0.23)", "    Item 2 (Medium): (0.36, -0.36, 0.36)", "    Item 3 (Medium): (-0.36, 0.36, -0.36)", "    Item 4 (Small): (-0.5, 0.5, 0.5)", "    Item 5 (Small): (0.5, -0.5, -0.5)"], "1.4.3.2 Item Size and Masses": ["Large Satellite Item: 3/8 SPHERE mass", "Medium Satellite Item: 1/4 SPHERE mass", "Small Satellite Item: 1/8 SPHERE mass"], "1.4.3.3 Item Acceleration Modifiers": ["Large Satellite Item: 8/11 normal speed", "Medium Satellite Item: 4/5 normal speed", "Small Satellite Item: 8/9 normal speed"], "1.4.4 Scoring Summary": ["Your score is largely based on the items you have in your Assembly Zone.", "Items are worth different point values depending on their sizes.", "The scoring calculation is as follows:", "    Small: 0.1 pts/sec", "    Medium: 0.15 pts/sec", "    Large: 0.2 pts/sec", "    Score on Final SPS drop: 0.1 / error radius"], "1.4.5 Penalties": ["Your score may also change due to various penalties that will be enforced as you play the game.", "*These penalties only apply to the 3D round.*", "The penalties will be enforced as follows:", "    Dock incorrectly: -0.3", "    Collision with items: (-0.5 x your SPHERES momentum)", "    Collision with SPHERES: (-0.5 x SPHERES momentum)", "        (The collision penalty is applied to both SPHERES)", "    Remaining in opponent's zone: -0.4/sec (after cumulative 10 sec)"], "1.4.6 End of game": ["The game ends after 180 seconds.", "Whichever team has more points wins.", "In the unlikely case of a tie, whoever is closer to the centre/origin of the playing field at game end wins."], "2. Tournament": ["A Zero Robotics tournament consists of several phases called competitions.", "The following lists the key deadlines for the 2018 tournament season:", " - May 10th: Late Application Deadline", " - May 10th: Qualifying Competition Launch", " - May 25th: Team Structure and Gantt Chart Submission (See Section 2.1)", " - June 15th: First Code Submission (See Section 2.1)", " - June 15th: Optional 3D stream begins (See Section 2.1.3)", " - June 29th: Final Code Submission (See Section 2.1)", " - July 2nd: Final Event - Qualifying Competition", " - International Competition Kick-off Event: TBD (Early September)", " - ISS Final Event: TBD (Early January 2019)"], "2.1 Outline of Competition Stages": ["The competition is run over many phases that are designed to build up participants knowledge and expertise.", "Firstly, the Australian Qualifying Competition is run to get students and teachers accustomed to the way that Zero Robotics works.", "This includes familiarisation with the website and IDE as well as making sure teams are organised in an effective way to ensure a productive and inclusive learning environment.", "The competition will launch on the 10th of May in 2018 with a Kick-off event at The University of Sydney.", "On the same day this manual will be released detailing the rules of this year's game and the requirements to qualify for the International Competition.", "Initially spaceSPHERES will be played in 2D, teams may submit code at any time after the competition begins on the 10th of May.", "As listed above the first deadline requires teams to submit some documents that outline the team structure and a Gantt chart that maps out the timeline teams have come up with in order to complete the competition.", "This can include dates for when parts of the team's code or strategy will be finalised, targets for tutorial completion or other specific learning goals your team comes up with.", "An example can be found on the website.", "To submit your team's documents email zero-robotics.admin@sydney.edu.au with the following:", " - One email per team", " - Attach a PDF version of your team structure and Gantt chart in ONE document", "- Call the file ' zr_planning_docs_SCHOOL_TEAMNAME.pdf ' where SCHOOL and TEAMNAME are your school and team name respectively", "- The email subject line will be the same as the name of the PDF containing your planning documents", "The next deadline is the First Code Submission.", "This is the deadline for teams to have submitted some piece of working code that scores points.", "Teams are strongly encouraged to submit code AS OFTEN AS THEY ADD ANYTHING TO THEIR TEAM'S CODE, this deadline is simply the latest date for teams to submit their first piece of code.", "We say this a lot but SUBMIT EARLY SUBMIT OFTEN is the best strategy for Zero Robotics.", "The Final Code Submission is the deadline for all code submission for the Qualifying Competition.", "After this date at midnight no submissions will be excepted."], "2.1.1 The International Competition": ["The University of Sydney coordinates the International Competition in Australia however it is run by MIT.", "This means that dates are planned to coincide with the US school terms and events and submission deadlines are all in US time.", "This can cause some inconvenience for Australian schools as deadlines are during the night and submissions can occur during school holidays.", "Teams that have planned well tend to deal with these inconveniences the best so pay attention to your Gantt chart and try to stick to your timeline."], "2.1.2 Qualification for the International Competition": ["In order to be entered into the International Competition teams must have passed the three above outlined submission criteria, i.e. submitted planning documents, met the first code submission deadline and submitted another working version of their code that is different to their original version.", "The 30% of teams will be admitted automatically, however the Venn diagram of teams that meet the above criteria and those who perform well tends to look very circular! If teams have a valid reason for not meeting these criteria and can show that they have been working through tutorials and improving their skills they may also be entered in the International Competition."], "2.1.3 Optional 3D Stream": ["After the first code submission teams will have the option to continue playing the competition in 2D or change and begin to play in 3D.", "For new teams this can be a challenging step and we encourage you to have a go early.", "There is however plenty of time between the Qualifying Competition and the International Competition if your team does not feel ready to make the change.", "The teams that wish to change will have their points transferred to a new leader board and the 2D leader board will be organised accordingly."], "2.2 The Leader board": ["Code will be able to be submitted at any time after the launch of the competition.", "The leader board will be 'run' once a week beginning the 1st of June.", "This means that every Friday night every teams code is matched against every other team's code and a leader board is constructed.", "After the code is run after the final submission the final leader board will be announced at the Qualifying Competition finals event.", "The result of this system is that teams are rewarded for submitting code as early as possible and updating and improving it as often as possible since they score points during all these leader board runs.", "Later runs are weighted more so winning matches later in the competition scores you more points."], "3.1 Tournament Rules": ["All participants in the Zero Robotics High School Tournament 2018 must abide by these tournament rules:", "The Zero Robotics team (MIT / Aurora/ ILC) can use/reproduce/publish any submitted code.", "In the event of a contradiction between the intent of the game and the behaviour of the game, MIT will clarify the rule and change the manual or code accordingly to keep the intent.", "Teams are expected to report all bugs as soon as they are found.", "A 'bug' is defined as a contradiction between the intent of the game and behaviour of the game.", "The intent of the game shall override the behaviour of any bugs up to code freeze.", "Teams should report bugs through the online support tools.", "ZR reserves the right to post any bug reports to the public forums (If necessary, ZR will work with the submitting team to ensure that no team strategies are revealed).", "Code and manual freeze will be in effect 3 days before the submission deadline of a competition.", "Within the code freeze period the code shall override all other materials, including the manual and intent.", "There will be no bug fixes during the code freeze period.", "All bug fixes must take place before the code freeze or after the competition.", "Game challenge additions and announcement of TBA values in the game manual may be based on lessons learned from earlier parts of the tournament."], "3.2 Ethics Code": ["The ZR team will work diligently upon report of any unethical situation, on a case by case basis.", "Teams are strongly encouraged to report bugs as soon as they are found; intentional abuse of an unreported bug may be considered as unethical behaviour.", "Teams shall not intentionally manipulate the scoring methods to change rankings.", "Teams shall not attempt to gain access to restricted ZR information.", "We encourage the use of public forums and allow the use of private methods for communication.", "Vulgar or offensive language, harassment of other users, and intentional annoyances are not permitted on the Zero Robotics website.", "Code submitted to a competition must be written only by students.", "Players may not access the implementation instance of the game or modify any variables of the object. In particular, the API and game objects should not be duplicated or modified in any capacity.", "Simulation requests may only be done manually via the website interface, API calls for simulation are not allowed (even if doable)."], "dockItem": ["`bool dockItem(int itemID)`", "Returns true if player picks up specific item successfully.", "Will only attempt to dock with itemID specified at the parameter itemID, the integer identifier of a given item."], "dropItem": ["`void dropItem()`", "Drops the item that the sphere is currently holding."], "getNumItem": ["`int getNumItem()`", "Returns the number of total items in play, whether they have been picked up yet or not."], "getItemLoc": ["`void getItemLoc(float pos[], int itemID)`", "Copies the location of a given item into the given array.", "The parameter pos is a pointer to an array of size 3 which will be overwritten by the item location.", "The parameter itemID is the integer identifier of a given item."], "getItemZRState": ["`void getItemZRState(float pos[12], int itemID)`", "Copies the ZR state of a given item into a given array.", "The parameter pos is a pointer to an array of size 12 which well be overwritten by the item state.", "The parameter itemID is the item whose state is being requested."], "itemInZone": ["`bool itemInZone(int itemID)`", "Returns whether the specified item is placed in your zone.", "Returns false if the item is being held or is not in the zone."], "hasItem": ["`int hasItem(int itemID)`", "Tells who has a given item.", "The parameter itemID is the integer identifier of a given item.", "Returns 0 if no one has picked up the specified item, 1 if you have picked up the item, or 2 if your opponent has picked up the item."], "getItemType": ["`int getItemType(int itemID)`", "Returns what the item type is.", "Possible Item Types:", "`ITEM_TYPE_LARGE`", "`ITEM_TYPE_MEDIUM`", "`ITEM_TYPE_SMALL`", "The parameter itemID is the integer identifier of a given item.", "Returns the corresponding item type to the given identifier."], "dropSPS": ["`void dropSPS()`", "Drops SPS Items."], "getScore": ["`float getScore()`", "Returns player's score."], "getOtherScore": ["`float getOtherScore()`", "Returns opponent's score."], "getFuelRemaining": ["`float getFuelRemaining()`", "Returns remaining fuel."], "getCurrentTime": ["`int getCurrentTime()`", "Returns the time in the game."], "sendMessage": ["`void sendMessage(unsigned char inputMsg)`", "Sends inputMsg to other satellite."], "receiveMessage": ["`unsigned char receiveMessage()`", "Returns the most recent message sent by other satellite."], "getNumSPSHeld": ["`int getNumSPSHeld()`", "Returns the number of SPSs still held by the sphere."], "getZone": ["`bool getZone(float zoneInfo[4])`", "If all SPSs have been placed, returns true and stores a zone estimation in zoneInfo.", "Otherwise returns false.", "Can only be called once per second.", "(In 3D the same values are returned each time the function is called)"], "hasItemBeenPickedUp": ["`bool hasItemBeenPickedUp(int itemID)`", "Returns true if itemID has been picked up at some point.", "Returns false otherwise."]}
